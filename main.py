from telebot import types
from telebot.async_telebot import AsyncTeleBot
import asyncio
import os
import json
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())

bot = AsyncTeleBot(os.getenv('TOKEN'))

question_category = ['full_name','old','education', 'name_organization', 'year_ending', 'speciality',
                     'study_now', 'location', 'renting_house', 'phone_number', 'family_status', 'children',
                     'military_service', 'experience', 'shift_work', 'business_trips', 'housing_problem',
                     'skill_PK', 'knowledge_programms', 'language_level', 'contraindications', 'found_us', 'personal_qualities']


questions_list = [['–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û', None],
                  ['–í–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç)', None],
                  ['–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è', {'–≤—ã—Å—à–∏–µ': 'high',
                                                        '–Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ': 'not_hight',
                                                        '—Å—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ': 'middle_prof',
                                                        '–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ': 'start_prof',
                                                        '—Å—Ä–µ–¥–Ω–µ–µ': 'middle',
                                                        '–Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ': 'not_middle'}],
                  ['–ù–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è', None],
                  ['–ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è?', None],
                  ['–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ –¥–∏–ø–ª–æ–º—É', None],
                  ['–£—á–µ–±–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è', None],
                  ['–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –í—ã –∂–∏–≤–µ—Ç–µ?', None],
                  ['–°–Ω–∏–º–∞–µ—Ç–µ –ª–∏ –≤—ã –∂–∏–ª—å–µ?', {'–¥–∞': 'home', '–Ω–µ—Ç': 'not_home'}],
                  ['–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', None],
                  ['–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ', {'—Å–≤–æ–±–æ–¥–µ–Ω': 'free_family','–µ—Å—Ç—å –ø–∞—Ä–µ–Ω—å/–¥–µ–≤—É—à–∫–∞': 'boy_family', '–∂–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º': 'married'}],
                  ['–î–µ—Ç–∏ –¥–æ 18 –ª–µ—Ç, (—É–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç, –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å)\n–ü—Ä–∏–º–µ—Ä: 16-–Ω–µ—Ç, 12-–µ—Å—Ç—å', None],
                  ['–°–ª—É–∂–±–∞ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –í–°', {'–¥–∞': 'served', '–Ω–µ—Ç': 'not_served'}],
                  ['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø–æ –ø—Ä–µ—Ç–µ–Ω–¥—É–µ–º–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏? (–∫–æ–ª-–≤–æ –ª–µ—Ç)', None],
                  ['–ò–º–µ–µ—Ç–µ –ª–∏ –í—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Å–º–µ–Ω–∞–º?', {'–¥–∞': 'change', '–Ω–µ—Ç': 'not_change'}],
                  ['–ò–º–µ–µ—Ç–µ –ª–∏ –í—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ–∑–¥–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏?', {'–¥–∞': 'mission', '–Ω–µ—Ç': 'not_mission'}],
                  ['–†–µ—à–µ–Ω–∞ –ª–∏ —É –í–∞—Å –∂–∏–ª–∏—â–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞?', {'–¥–∞': 'problem', '–Ω–µ—Ç': 'not_problem'}],
                  ['–£–º–µ–µ—Ç–µ –ª–∏ –í—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ü–ö?', {'–¥–∞': 'pk', '–Ω–µ—Ç': 'not_pk'}],
                  ['–ö–∞–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤—ã –∑–Ω–∞–µ—Ç–µ?', None],
                  ['–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞', {'(–ê1) ‚Äì –Ω–∞—á–∞–ª—å–Ω—ã–π': 'first_level',
                                                                  '(–ê2) ‚Äì –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ': 'second_level',
                                                                  '(–í1) ‚Äì —Å—Ä–µ–¥–Ω–∏–π': 'third_level',
                                                                  '(–í2) ‚Äì –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ': 'fourth_level',
                                                                  '(C1) ‚Äì –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': 'fifth_level',
                                                                  '(C2) ‚Äì –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è': 'sixth_level',
                                                                  '–ù–µ –∑–Ω–∞—é': 'zero_level'}],
                  ['–õ–∏—á–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è?', None],
                  ['–ö–∞–∫ –í—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?', None],
                  ['–õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞?', None]
                  ]


def first_power():
    if os.path.isfile('session.json'):
        print("–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        session = {}
        with open('session.json', 'w') as file:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª
            json.dump(session, file)



def new_user_reg(message):
    chat_id = message.from_user.id
    print(type(chat_id)) # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
    new_user_bool = False
    with open('session.json', 'r') as file:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞
        session = json.load(file)
    if str(chat_id) in session:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        return True
    else:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        session[chat_id] = {
            'name': message.from_user.first_name,
            'index_question': 0
        }
        with open('session.json', 'w') as file:
            json.dump(session, file, ensure_ascii=False)
        return False

def get_session():
    with open('session.json', 'r') as file:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞
        session = json.load(file)
    return session
def save_session(session):
    with open('session.json', 'w') as file:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª
        json.dump(session, file, ensure_ascii=False)


async def response_handler(chat_id ):
    global bot_message
    session = get_session()
    index_question = session[str(chat_id)]['index_question']
    if questions_list[index_question][1] == None:
        markup = types.ForceReply(selective=False)
        await bot.delete_message(chat_id, bot_message.id)
        bot_message = await bot.send_message(chat_id, questions_list[index_question][0], reply_markup=markup)
    else:
        await bot.delete_message(chat_id, bot_message.id)
        bot_message = await bot.send_message(chat_id, questions_list[index_question][0], reply_markup=create_keyboard_markup(questions_list[index_question][1]))


def get_button_text(call, callback_data):
    button_list = call.json['message']['reply_markup']['inline_keyboard']
    for row in button_list:
        for button in row:
            if button['callback_data'] == callback_data:
                return button['text']
    return None


def create_keyboard_markup(button_dict):
    keyboard = types.InlineKeyboardMarkup()
    for button_text, callback_data in button_dict.items():
        button = types.InlineKeyboardButton(button_text, callback_data=callback_data)
        keyboard.add(button)

    return keyboard

@bot.message_handler(commands=['main'])
async def send_main(message):
    chat_id = message.from_user.id
    button_dict = {
        '–û –Ω–∞—Å': 'about_as',
        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ä–µ–∑—é–º–µ': 'record_in_PD',
    }
    global bot_message
    await bot.delete_message(chat_id, bot_message.id)
    await bot.delete_message(chat_id, message.id)
    bot_message = await bot.send_message(chat_id,'–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ? üòä', reply_markup=create_keyboard_markup(button_dict))

@bot.message_handler(commands=['help', 'start'])
async def send_welcome(message):
    chat_id = message.from_user.id
    print(str(chat_id) + " " + str(message.from_user.first_name))
    button_dict = {
        '–û –Ω–∞—Å': 'about_as',
        '–ó–∞–ø–∏—Å—å –≤ –æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤': 'record_in_PD',
    }
    keyboard = create_keyboard_markup(button_dict)
    global bot_message
    if new_user_reg(message):
        bot_message = await bot.send_message(chat_id, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ' + str(message.from_user.first_name) + '!', reply_markup=keyboard)
    else:
        bot_message = await bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ –ø–æ–∑–Ω–æ–∫–æ–º–∏—Ç—Å—è, ' + str(message.from_user.first_name) + '!', reply_markup=keyboard)

async def handle_callback_response(chat_id, call, button_call):
    session = get_session()
    session[str(chat_id)][question_category[session[str(chat_id)]['index_question']]] = get_button_text(call, button_call)
    session[str(chat_id)]['index_question'] += 1
    save_session(session)
    await handle_callback(start_resume)


@bot.callback_query_handler(func=lambda call: True)
async def handle_callback(call):
    print(call.json['message']['reply_markup']['inline_keyboard'])
    global bot_message
    chat_id = call.message.chat.id
    button_call = call.data
    session = get_session()
    if button_call == 'about_as':
        await bot.edit_message_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É 1.", chat_id, bot_message.id)
    elif button_call == 'record_in_PD':
        button_dict = {
            '–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ': 'start_resume',
            '–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†': 'main',
        }
        await bot.edit_message_text("–í—ã –º–æ–∂–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ, –∏ –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ –∫–∞–¥—Ä–æ–≤.", chat_id, bot_message.id, reply_markup=create_keyboard_markup(button_dict))
    elif button_call =='start_resume':
        global start_resume
        start_resume = call
        await response_handler(chat_id)
    elif button_call == 'main':
        button_dict = {
            '–û –Ω–∞—Å': 'about_as',
            '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ä–µ–∑—é–º–µ': 'record_in_PD',
        }
        await bot.edit_message_text('–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ? üòä', chat_id, bot_message.id, reply_markup=create_keyboard_markup(button_dict))
    else:
        await handle_callback_response(chat_id, call, button_call)


async def handle_reply_response(chat_id, message):
    session = get_session()
    try:
        session[str(chat_id)][question_category[session[str(chat_id)]['index_question']]] = int(message.text)
    except:
        session[str(chat_id)][question_category[session[str(chat_id)]['index_question']]] = message.text
    session[str(chat_id)]['index_question'] += 1
    save_session(session)
    await handle_callback(start_resume)
    await bot.delete_message(chat_id, message.id)


@bot.message_handler(func=lambda message: True)
async def handle_reply(message):
    chat_id = message.chat.id
    session = get_session()
    if message.reply_to_message is not None:
        await handle_reply_response(chat_id, message)



first_power()
asyncio.run(bot.polling())